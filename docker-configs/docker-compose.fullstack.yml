version: '3.8'

services:
  # Core Services
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: graphrag
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports: ["5432:5432"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  neo4j:
    image: neo4j:5-community
    environment:
      NEO4J_AUTH: neo4j/test123
      NEO4JLABS_PLUGINS: '["apoc"]'
    volumes: [neo4jdata:/data]
    ports: ["7474:7474", "7687:7687"]

  redis:
    image: redis:7-alpine
    ports: ["6379:6379"]

  # Application Services
  webapp:
    build:
      context: ./apps/web
      target: ${NODE_ENV:-development}
    ports: ["3000:3000"]
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_PUBLIC_SUPABASE_URL: ${NEXT_PUBLIC_SUPABASE_URL:-http://localhost:54321}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${NEXT_PUBLIC_SUPABASE_ANON_KEY:-anonkeyplaceholder}
    volumes:
      - ./apps/web:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy

  # AI/ML Services
  ollama:
    image: ollama/ollama:latest
    ports: ["11434:11434"]
    profiles: ["ai"]

  # Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    ports: ["5678:5678"]
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_DATABASE: graphrag
      DB_POSTGRESDB_HOST: postgres
    profiles: ["automation"]

  # Monitoring
  graphite:
    image: graphiteapp/graphite-statsd:latest
    ports: ["8080:80", "8125:8125/udp"]
    profiles: ["monitoring"]

volumes:
  pgdata:
  neo4jdata:

# Activation Profiles
# basic:  docker-compose up
# full:   docker-compose --profile ai --profile automation up
